Adding two binary numbers

u, v are W bits longs
they can yield W+1 bits

u + v - ignore the carry bit, it is truncated

 0101 = 5
+0101 = 5
----------
 1010 = 10

 Arithmetic shifts preserves the sign
 Logical Shifts does not care about sign and fills with 0

--------------------------------------------------------------------------------
Floating Point Multiplication

Sign s: S1 ^ S2
Significand M: M1 x M2
Exponent E: E1 + E2

If M >= 2
Shift the M to the right
Add 1 to E until a leading 1. is found

Floating Point Addition
Assume E1 > E2
Sign S: S
Significand M: Result of signed align & Add
Exponent: E1

If M >= 2 or M < 1
  Shift the correct direction
  Add or subtract to E based on the shifts (right + 1, left - 1)
  Overflow if E out of range
  Round M to fit frac precision
